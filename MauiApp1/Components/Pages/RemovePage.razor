@page "/RemovePage"

@using System.Text.Json
@using System.ComponentModel.DataAnnotations
@inject ISnackbar Snackbar
@inject IJSRuntime JS

<MudPaper Class="pa-4 mx-auto" Style="max-width:600px;">
    <EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <MudText Typo="Typo.h5" Class="mb-4">Remove Car</MudText>

        <MudSelect @bind-Value="model.SelectedCarId" Label="Select Car to Remove" T="int" For="@(() => model.SelectedCarId)">
            @foreach (var car in cars)
            {
                <MudSelectItem Value="@car.Id">[@car.Id] @car.Name (@car.Location)</MudSelectItem>
            }
        </MudSelect>

        <ValidationMessage For="@(() => model.SelectedCarId)" />

        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Error" Class="mt-4" Disabled="@(!cars.Any())">
            Remove Car
        </MudButton>
    </EditForm>

    @if (!cars.Any())
    {
        <MudText>No cars available to remove.</MudText>
    }
</MudPaper>

@code {
    private List<CarModel> cars = new();
    private RemoveCarModel model = new();
    private string filePath = Path.Combine("E:\\Lau\\Projects\\ProiectTTTvMM", "cars.json");

    protected override async Task OnInitializedAsync()
    {
        await LogToConsole("Initializing RemovePage...");
        await LoadCarsAsync();
    }

    private async Task LoadCarsAsync()
    {
        try
        {
            if (File.Exists(filePath))
            {
                var json = await File.ReadAllTextAsync(filePath);
                cars = JsonSerializer.Deserialize<List<CarModel>>(json) ?? new();
                await LogToConsole($"Loaded {cars.Count} cars from JSON.");
            }
            else
            {
                await LogToConsole("cars.json file not found.");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error loading cars.", Severity.Error);
            await LogToConsole($"Error loading cars: {ex.Message}");
        }
    }

    private async Task SaveCarsAsync()
    {
        try
        {
            var json = JsonSerializer.Serialize(cars, new JsonSerializerOptions { WriteIndented = true });
            await File.WriteAllTextAsync(filePath, json);
            await LogToConsole("Successfully saved cars to JSON.");
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error saving cars.", Severity.Error);
            await LogToConsole($"Error saving cars: {ex.Message}");
        }
    }

    private async Task HandleValidSubmit()
    {
        await LogToConsole($"Form submitted. SelectedCarId = {model.SelectedCarId}");

        var carToRemove = cars.FirstOrDefault(c => c.Id == model.SelectedCarId);
        if (carToRemove != null)
        {
            cars.Remove(carToRemove);
            await SaveCarsAsync();
            Snackbar.Add($"Removed car: {carToRemove.Name}", Severity.Success);
            model.SelectedCarId = 0;
            StateHasChanged();
            await LogToConsole($"Successfully removed car with ID: {carToRemove.Id}");
        }
        else
        {
            await LogToConsole("Car not found in the list.");
        }
    }

    private async Task LogToConsole(string message)
    {
        await JS.InvokeVoidAsync("console.log", $"[RemovePage] {message}");
    }

    public class CarModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string ImageUrl { get; set; }
        public string Location { get; set; }
        public string Description { get; set; }
    }

    public class RemoveCarModel
    {
        [Required(ErrorMessage = "Please select a car to remove.")]
        public int SelectedCarId { get; set; }
    }
}