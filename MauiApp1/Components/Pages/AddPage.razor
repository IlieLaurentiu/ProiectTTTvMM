@page "/AddPage"

@using System.Xml.Serialization
@using MudBlazor
@inject ISnackbar Snackbar

<MudPaper Class="pa-4 mx-auto" Style="max-width:600px;">
    <MudForm @ref="form" OnValidSubmit="HandleValidSubmit">

        <MudText Typo="Typo.h5" Class="mb-4">Add Car</MudText>

        <MudTextField @bind-Value="newCar.Name" Label="Name" Required="true" />
        <MudTextField @bind-Value="newCar.ImageUrl" Label="Image URL" Required="true" />
        <MudTextField @bind-Value="newCar.Location" Label="Location" Required="true" />
        <MudTextField @bind-Value="newCar.Description" Label="Description" />

        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">Add Car</MudButton>

    </MudForm>
</MudPaper>

@code {
    private MudForm form;
    private CarModel newCar = new();

    private List<CarModel> cars = new();

    private string filePath = Path.Combine("D:\\Development\\Projects\\ProiectTTTvMM\\MauiApp1", "cars.xml");

    protected override async Task OnInitializedAsync()
    {
        await LoadCarsAsync();
    }

    private async Task LoadCarsAsync()
    {
        try
        {
            if (File.Exists(filePath))
            {
                var serializer = new XmlSerializer(typeof(List<CarModel>));
                using var stream = File.OpenRead(filePath);
                cars = (List<CarModel>)serializer.Deserialize(stream);
            }
            else
            {
                cars = new List<CarModel>();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading cars: {ex.Message}", Severity.Error);
            cars = new List<CarModel>();
        }
    }

    private async Task SaveCarsAsync()
    {
        try
        {
            var serializer = new XmlSerializer(typeof(List<CarModel>));
            using var stream = File.Create(filePath);
            serializer.Serialize(stream, cars);
            Console.WriteLine("✅ XML file saved successfully.");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving cars: {ex.Message}", Severity.Error);
        }
    }

    private async Task HandleValidSubmit()
    {
        // Generate a new Id based on max existing Id or 1 if empty
        newCar.Id = cars.Any() ? cars.Max(c => c.Id) + 1 : 1;

        cars.Add(newCar);

        await SaveCarsAsync();

        Snackbar.Add($"✅ Added car: {newCar.Name}", Severity.Success);

        newCar = new CarModel(); // reset form model
        await form.ResetAsync();
    }

    public class CarModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string ImageUrl { get; set; }
        public string Location { get; set; }
        public string Description { get; set; }
    }
}
